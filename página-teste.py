# ==============================================================================
# 1. IMPORTA√á√ïES DE BIBLIOTECAS
# ==============================================================================
import streamlit as st
import pandas as pd
import numpy as np
import logging
from datetime import datetime
import plotly.graph_objects as go
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ==============================================================================
# 2. CONFIGURA√á√ïES GLOBAIS E ESTILO DA P√ÅGINA
# ==============================================================================

# --- Configura√ß√£o da P√°gina do Streamlit ---
st.set_page_config(
    page_title="Ambiente de Projetos", layout="wide", initial_sidebar_state="expanded"
)

# --- Configura√ß√£o do Sistema de Logging ---
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

# --- Vari√°veis Globais e Constantes ---
CARGOS_EXCLUIDOS = [
    "L√≠der de Outbound",
    "Coordenador de Neg√≥cios",
    "Coordenador de Inova√ß√£o Comercial",
    "Gerente Comercial",
    "Coordenador de Projetos",
    "Coordenador de Inova√ß√£o de Projetos",
    "Gerente de Projetos",
]

DATE_COLUMNS = [
    "In√≠cio Real Projeto 1", "Fim previsto do Projeto 1 (sem atraso)", "Fim estimado do Projeto 1 (com atraso)",
    "In√≠cio Real Projeto 2", "Fim previsto do Projeto 2 (sem atraso)", "Fim estimado do Projeto 2 (com atraso)",
    "In√≠cio Real Projeto 3", "Fim previsto do Projeto 3 (sem atraso)", "Fim estimado do Projeto 3 (com atraso)",
    "In√≠cio Real Projeto 4", "Fim previsto do Projeto 4 (sem atraso)", "Fim estimado do Projeto 4 (com atraso)",
    "In√≠cio do Projeto Interno 1", "Fim do Projeto Interno 1",
    "In√≠cio do Projeto Interno 2", "Fim do Projeto Interno 2",
    "In√≠cio do Projeto Interno 3", "Fim do Projeto Interno 3",
]

# --- Estilo CSS Customizado ---
st.markdown(
    """
    <style>
    * {
        font-family: 'Poppins', sans-serif !important;
    }
    /* Estilo para a barra de cabe√ßalho superior */
    .st-emotion-cache-ttupiz {
        position: fixed;
        top: 0px;
        left: 0px;
        right: 0px;
        height: 4.5rem;
        background: #064381;
        outline: none;
        z-index: 999990;
        display: block;
    }
    /* Estilo para as linhas divis√≥rias */
    hr {
        border: 0;
        background-color: #064381;
        height: 2px;
    }
    hr:not([size]) {
        height: 2px;
    }
    .st-emotion-cache-10d29ip hr {
        background-color: #064381;
        border-bottom: 2px solid #064381;
    }
    /* Oculta o menu padr√£o e o rodap√© do Streamlit */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    </style>
    <div class="fullscreen-div"></div>
    """,
    unsafe_allow_html=True,
)


# ==============================================================================
# 3. CARREGAMENTO E PREPARA√á√ÉO DE DADOS (BACKEND)
# ==============================================================================

@st.cache_data(ttl=86400)  # Cache expira em 1 dia (86400 segundos)
def load_pcp_data():
    """Fun√ß√£o principal que tenta carregar os dados do Google Sheets."""
    try:
        return load_from_gsheets()
    except Exception as e:
        st.warning(f"Falha ao carregar do Google Sheets: {e}. Verifique a conex√£o e as credenciais.")
        st.exit()


def load_from_gsheets():
    """Conecta ao Google Sheets, baixa e pr√©-processa os dados de cada aba."""
    try:
        # --- Autentica√ß√£o com Google Sheets API ---
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds_info = st.secrets["gcp_service_account"]
        credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_info, scope)
        client = gspread.authorize(credentials)

        # --- Conex√£o com a Planilha ---
        spreadsheet = client.open("PCP Auto")
        sheet_names = ["NDados", "NTec", "NCiv", "NI", "NCon"]
        all_sheets = {}

        # --- Processamento de Cada Aba ---
        for sheet_name in sheet_names:
            try:
                worksheet = spreadsheet.worksheet(sheet_name)
                data = worksheet.get_all_values()

                if not data:
                    logging.warning(f"Nenhum dado encontrado na planilha: {sheet_name}")
                    all_sheets[sheet_name] = pd.DataFrame()
                    continue

                headers = data[0]
                values = data[1:]

                # Remove a coluna "Email PJ" por seguran√ßa, se existir
                if "Email PJ" in headers:
                    email_index = headers.index("Email PJ")
                    headers = [h for i, h in enumerate(headers) if i != email_index]
                    values = [[v for i, v in enumerate(row) if i != email_index] for row in values]

                pcp_df = pd.DataFrame(values, columns=headers)

                # LIMPEZA INICIAL: Remove linhas sem um membro definido
                if 'Membro' in pcp_df.columns:
                    pcp_df['Membro'].replace(['', 'None', '-'], np.nan, inplace=True)
                    pcp_df.dropna(subset=['Membro'], inplace=True)

                # Converte colunas de data para o formato correto
                for date_col in DATE_COLUMNS:
                    if date_col in pcp_df.columns:
                        pcp_df[date_col] = pd.to_datetime(pcp_df[date_col], format="%d/%m/%Y", errors="coerce").dt.strftime("%d/%m/%Y")

                # Remove cargos de lideran√ßa que n√£o devem aparecer na an√°lise
                if "Cargo no n√∫cleo" in pcp_df.columns:
                    pcp_df = pcp_df[~pcp_df["Cargo no n√∫cleo"].isin(CARGOS_EXCLUIDOS)]

                all_sheets[sheet_name] = pcp_df

            except gspread.exceptions.WorksheetNotFound:
                st.warning(f"Aba '{sheet_name}' n√£o encontrada no documento.")
                all_sheets[sheet_name] = pd.DataFrame()
            except Exception as e:
                st.warning(f"Erro ao carregar a aba '{sheet_name}': {str(e)}")
                logging.error(f"Erro detalhado na aba '{sheet_name}': {str(e)}", exc_info=True)
                all_sheets[sheet_name] = pd.DataFrame()

        return all_sheets

    except Exception as e:
        logging.error(f"Erro ao conectar com Google Sheets: {str(e)}", exc_info=True)
        st.error(f"Erro fatal ao conectar com Google Sheets: {str(e)}", icon="üö®")
        st.stop()


# ==============================================================================
# 4. FUN√á√ïES DE L√ìGICA DE NEG√ìCIO (BACKEND)
# ==============================================================================

def nucleo_func(nucleo_digitado):
    """Retorna o DataFrame de um n√∫cleo espec√≠fico, j√° limpo."""
    nucleo_digitado = nucleo_digitado.replace(" ", "").lower()
    nucleos_map = {"nciv": "NCiv", "ncon": "NCon", "ndados": "NDados", "ni": "NI", "ntec": "NTec"}

    if "pcp" not in st.session_state:
        st.session_state.pcp = load_pcp_data()

    sheet_name = nucleos_map.get(nucleo_digitado)
    if not sheet_name or sheet_name not in st.session_state.pcp:
        return None

    df = st.session_state.pcp[sheet_name].copy()
    
    # Limpeza final do DataFrame espec√≠fico do n√∫cleo
    df.replace(["None", "-", ""], np.nan, inplace=True)
    df.dropna(axis=1, how="all", inplace=True) # Remove colunas totalmente vazias
    df.dropna(subset=[df.columns[0]], inplace=True) # Garante que a primeira coluna n√£o seja nula

    return df


def calcular_disponibilidade(analista, inicio_novo_projeto):
    """Calcula as horas de disponibilidade de um analista."""
    horas_disponiveis = 30.0

    # Descontos fixos por atividades
    try:
        n_aprendizagens = pd.to_numeric(analista.get("N¬∞ Aprendizagens", 0), errors='coerce')
        horas_disponiveis -= n_aprendizagens * 5
    except (ValueError, TypeError): pass

    try:
        n_assessorias = pd.to_numeric(analista.get("N¬∞ Assessorias", 0), errors='coerce')
        horas_disponiveis -= n_assessorias * 10
    except (ValueError, TypeError): pass

    for i in range(1, 5):
        if pd.notnull(analista.get(f"In√≠cio do Projeto Interno {i}")):
            horas_disponiveis -= 5

    if str(analista.get("Cargo no n√∫cleo", "")).strip().upper() in ["SDR OU HUNTER", "ANALISTA S√äNIOR"]:
        horas_disponiveis -= 10

    # Desconto vari√°vel por projetos externos
    for i in range(1, 5):
        fim_estimado = analista.get(f"Fim estimado do Projeto {i} (com atraso)")
        fim_previsto = analista.get(f"Fim previsto do Projeto {i} (sem atraso)")
        fim_projeto = fim_estimado if pd.notnull(fim_estimado) else fim_previsto

        if pd.notnull(fim_projeto):
            days_left = (fim_projeto - inicio_novo_projeto).days
            if days_left > 14:
                horas_disponiveis -= 10
            elif 7 < days_left <= 14:
                horas_disponiveis -= 4
            elif days_left <= 7:
                horas_disponiveis -= 1
        else:
            # Se o projeto existe mas n√£o tem data de fim, desconta 10h
            if pd.notnull(analista.get(f"Projeto {i}")):
                horas_disponiveis -= 10

    return horas_disponiveis


def calcular_afinidade(analista, escopo_selecionado):
    """Calcula a nota de afinidade de um analista com um projeto."""
    # Crit√©rio 1: Satisfa√ß√£o com o Portf√≥lio
    satisfacao_col = f"Satisfa√ß√£o com o Portf√≥lio: {escopo_selecionado}"
    satisfacao_portfolio = 3.0 # Valor padr√£o
    if satisfacao_col in analista and pd.notna(analista[satisfacao_col]):
        try:
            satisfacao_portfolio = float(str(analista[satisfacao_col]).replace(",", "."))
        except (ValueError, TypeError): pass
    satisfacao_portfolio *= 2

    # Crit√©rio 2: Capacidade T√©cnica (Valida√ß√£o m√©dia)
    capacidade_vals = []
    for i in range(1, 5):
        try:
            val = float(str(analista.get(f"Valida√ß√£o m√©dia do Projeto {i}")).replace(",", "."))
            capacidade_vals.append(val)
        except (ValueError, TypeError, AttributeError): continue
    capacidade = np.mean(capacidade_vals) if capacidade_vals else 3.0
    capacidade *= 2

    # Crit√©rio 3: Sa√∫de Mental
    sentimento_map = {"SUBALOCADO": 10, "ESTOU SATISFEITO": 5, "SUPERALOCADO": 1}
    sentimento_nota = sentimento_map.get(str(analista.get("Como se sente em rela√ß√£o √† carga", "")).strip().upper(), 5)
    try:
        saude_mental = float(str(analista.get("Sa√∫de mental na PJ", "5")).replace(",", "."))
    except (ValueError, TypeError): saude_mental = 5.0
    saude_final = (sentimento_nota + saude_mental) / 2

    return (satisfacao_portfolio + capacidade + saude_final) / 3


def converte_data(df, date_cols):
    """Converte m√∫ltiplas colunas de um DataFrame para o tipo datetime."""
    df_copy = df.copy()
    for col in date_cols:
        if col in df_copy.columns:
            df_copy[col] = pd.to_datetime(df_copy[col], errors="coerce", format="%d/%m/%Y")
    return df_copy

def calcular_contagem_alocacoes(df_para_calcular):
    """Calcula o n√∫mero de projetos e atividades para cada membro."""
    contagem = pd.Series(0, index=df_para_calcular.index)
    data_atual = pd.Timestamp.now()

    # 1. Conta projetos externos ativos
    for i in range(1, 5):
        col_projeto = f"Projeto {i}"
        if col_projeto in df_para_calcular.columns:
            fim_estimado = pd.to_datetime(df_para_calcular.get(f"Fim estimado do Projeto {i} (com atraso)"), errors='coerce')
            fim_previsto = pd.to_datetime(df_para_calcular.get(f"Fim previsto do Projeto {i} (sem atraso)"), errors='coerce')
            fim_final = fim_estimado.fillna(fim_previsto)
            
            condicao_ativo = df_para_calcular[col_projeto].notna() & ((fim_final.isna()) | (fim_final > data_atual))
            contagem += condicao_ativo.astype(int)

    # 2. Adiciona outras atividades que contam como aloca√ß√£o
    for col in ["Projeto Interno 1", "Projeto Interno 2", "Projeto Interno 3", "Cargo WI", "Cargo MKT", "N¬∞ Aprendizagens", "N¬∞ Assessorias"]:
        if col in df_para_calcular.columns:
            contagem += df_para_calcular[col].notna().astype(int)
            
    return contagem


# ==============================================================================
# 5. INTERFACE DO USU√ÅRIO (FRONTEND)
# ==============================================================================

# --- Barra Lateral e Navega√ß√£o ---
page = st.sidebar.selectbox("Escolha uma p√°gina", ("Base Consolidada", "PCP"))
st.title(page)

# --- Inicializa√ß√£o do Estado da Sess√£o ---
if "nucleo" not in st.session_state: st.session_state.nucleo = None
if "nome" not in st.session_state: st.session_state.nome = ""
if "cargo" not in st.session_state: st.session_state.cargo = ""
if "aloc" not in st.session_state: st.session_state.aloc = None

# --- Layout dos Bot√µes de Sele√ß√£o de N√∫cleo ---
colnan, colciv, colcon, coldados, colni, coltec = st.columns([1, 2, 2, 2, 2, 2])
if colciv.button("NCiv"): st.session_state.nucleo = "NCiv"
if colcon.button("NCon"): st.session_state.nucleo = "NCon"
if coldados.button("NDados"): st.session_state.nucleo = "NDados"
if colni.button("NI"): st.session_state.nucleo = "NI"
if coltec.button("NTec"): st.session_state.nucleo = "NTec"


# ------------------------------------------------------------------------------
# P√ÅGINA: BASE CONSOLIDADA
# ------------------------------------------------------------------------------
if page == "Base Consolidada":
    if st.session_state.nucleo:
        with st.spinner("Carregando..."):
            df = nucleo_func(st.session_state.nucleo)
            df = converte_data(df, DATE_COLUMNS)

            # --- Filtros da Base Consolidada ---
            colcargo, colnome, colaloc = st.columns(3)
            nome = colnome.text_input("Nome do Membro", key="nome_input_base")
            cargo = colcargo.text_input("Cargo", key="cargo_input_base")
            aloca√ß√µes = colaloc.selectbox("Filtrar por Aloca√ß√µes", options=["Desalocado", "1 Aloca√ß√£o", "2 Aloca√ß√µes", "3 Aloca√ß√µes", "4+ Aloca√ß√µes"], key="aloc_input_base")
            
            # --- Aplica√ß√£o dos Filtros ---
            if nome:
                df = df[df["Membro"].str.strip().str.lower() == nome.strip().lower()]
            if cargo:
                df = df[df["Cargo no n√∫cleo"].str.strip().str.lower() == cargo.strip().lower()]

            if aloca√ß√µes == "Desalocado":
                df = df[df['Contagem_Alocacoes'] == 0]
            elif aloca√ß√µes == "1 Aloca√ß√£o":
                df = df[df['Contagem_Alocacoes'] == 1]
            elif aloca√ß√µes == "2 Aloca√ß√µes":
                df = df[df['Contagem_Alocacoes'] == 2]
            elif aloca√ß√µes == "3 Aloca√ß√µes":
                df = df[df['Contagem_Alocacoes'] == 3]
            elif aloca√ß√µes == "4+ Aloca√ß√µes":
                df = df[df['Contagem_Alocacoes'] >= 4]

            # --- Exibi√ß√£o dos Dados ---
            if df.empty:
                st.write("Sem informa√ß√µes para os dados filtrados.")
            else:
                st.dataframe(df.reset_index(drop=True), hide_index=True)
            
            # (L√≥gica de exibi√ß√£o de gr√°ficos e cards individuais pode ser adicionada aqui)

    else:
        st.info("Por favor, selecione um n√∫cleo para come√ßar.")


# ------------------------------------------------------------------------------
# P√ÅGINA: PCP (Planejamento, Controle e Produ√ß√£o)
# ------------------------------------------------------------------------------
if page == "PCP":
    if not st.session_state.nucleo:
        st.warning("Por favor, selecione um n√∫cleo primeiro.", icon="‚ö†Ô∏è")
        st.stop()

    df = nucleo_func(st.session_state.nucleo)
    if df is None or df.empty:
        st.warning(f"Nenhum dado encontrado para o n√∫cleo: {st.session_state.nucleo}", icon="‚ö†Ô∏è")
        st.stop()

    df = converte_data(df, DATE_COLUMNS)

    # --- Filtros da P√°gina PCP ---
    col_escopo, col_analista, col_data = st.columns(3)
    
    # Filtro de Portf√≥lio/Escopo
    with col_escopo:
        # L√≥gica para obter escopos dinamicamente (simplificada)
        escopos = ["Gest√£o de Processos", "N√£o mapeado"] # Exemplo, pode ser tornado din√¢mico
        escopo = st.selectbox("**Portf√≥lio**", options=escopos)

    # Filtro de Analistas
    with col_analista:
        analistas = sorted(df["Membro"].astype(str).unique().tolist(), key=str.lower)
        analistas_selecionados = st.multiselect("**Analista**", options=analistas, placeholder="Todos")

    # Filtro de Data de In√≠cio
    with col_data:
        inicio = st.date_input("**Data de In√≠cio do Projeto**", value=datetime.today().date(), format="DD/MM/YYYY")
    inicio_novo_projeto = pd.Timestamp(inicio)

    # Filtros de Peso e Data de Fim
    col_disp, col_afin, col_fim = st.columns(3)
    with col_disp:
        disponibilidade_weight = st.number_input("**Peso da Disponibilidade (0.3-0.7)**", 0.3, 0.7, 0.5, 0.1)
    with col_afin:
        afinidade_weight = st.number_input("**Peso da Afinidade (0.3-0.7)**", 0.3, 0.7, 0.5, 0.1)
    with col_fim:
        default_fim = (pd.Timestamp(inicio) + pd.DateOffset(months=2)).date()
        fim = st.date_input("**Data de Fim do Projeto**", value=default_fim, min_value=inicio, format="DD/MM/YYYY")

    # --- C√°lculos das M√©tricas ---
    df["Disponibilidade"] = df.apply(lambda row: calcular_disponibilidade(row, inicio_novo_projeto), axis=1)
    df["Afinidade"] = df.apply(lambda row: calcular_afinidade(row, escopo), axis=1)
    
    # Normaliza√ß√£o da Nota de Disponibilidade
    max_disp, min_disp = 30, df["Disponibilidade"].min()
    range_disp = max_disp - min_disp
    df["Nota Disponibilidade"] = 10 * (df["Disponibilidade"] - min_disp) / range_disp if range_disp != 0 else 10

    # C√°lculo da Nota Final com pesos
    df["Nota Final"] = (df["Afinidade"] * afinidade_weight) + (df["Nota Disponibilidade"] * disponibilidade_weight)

    # --- Filtragem e M√©dias ---
    df_filtrado = df[df["Membro"].isin(analistas_selecionados)] if analistas_selecionados else df
    
    if not df_filtrado.empty:
        dispo_media = df_filtrado["Disponibilidade"].mean()
        afini_media = df_filtrado["Afinidade"].mean()
    else:
        dispo_media, afini_media = 0, 0
    
    # --- Exibi√ß√£o dos Resultados ---
    st.markdown("---")
    st.subheader("Membros Sugeridos para o Projeto")
    st.markdown("""
    <div style="margin-bottom: 20px">
    <p><strong>Entendendo as pontua√ß√µes:</strong></p>
    <ul>
      <li><strong>Disponibilidade</strong>: Horas estimadas dispon√≠veis para novas atividades (M√°ximo: 30h)</li>
      <li><strong>Afinidade</strong>: Pontua√ß√£o (0-10) baseada em satisfa√ß√£o, capacidade e sa√∫de mental</li>
      <li><strong>Nota Final</strong>: M√©dia ponderada entre disponibilidade e afinidade</li>
    </ul>
    </div>
    """, unsafe_allow_html=True)

    # --- Gera√ß√£o dos Cards de Resultado ---
    display_df = df_filtrado.sort_values(by="Nota Final", ascending=False)

    for index, row in display_df.iterrows():
        membro_nome = " ".join([part.capitalize() for part in row['Membro'].split(".")])
        
        st.markdown(f"""
        <div style="border: 2px solid #a1a1a1; padding: 15px; border-radius: 10px; width: 700px; color:#064381; margin-bottom: 10px;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div style="flex: 1;">
                    <h3>{membro_nome}</h3>
                    
                    <p style="margin-bottom: 0px;">Disponibilidade</p>
                    <div style="width: 80%; background-color: #decda9; border-radius: 5px; height: 20px; position: relative; margin-bottom: 5px;">
                        <div style="width: {min(100, (row['Disponibilidade'] / 30.0) * 100)}%; background-color: {'#2fa83b' if row['Disponibilidade'] > 20 else '#fbac04' if row['Disponibilidade'] >= 10 else '#c93220'}; height: 100%;"></div>
                        <div style="position: absolute; top: 0; bottom: 0; width: 3px; background-color: black; left: {min(100, (dispo_media / 30.0) * 100)}%;"></div>
                    </div>
                    <p style="margin-bottom: 10px;">{row['Disponibilidade']:.2f}h / 30.0h</p>

                    <p style="margin-bottom: 0px;">Afinidade</p>
                    <div style="width: 80%; background-color: #decda9; border-radius: 5px; height: 20px; position: relative; margin-bottom: 5px;">
                        <div style="width: {min(100, (row['Afinidade'] / 10.0) * 100)}%; background-color: {'#2fa83b' if row['Afinidade'] > 7 else '#fbac04' if row['Afinidade'] >= 4 else '#c93220'}; height: 100%;"></div>
                        <div style="position: absolute; top: 0; bottom: 0; width: 3px; background-color: black; left: {min(100, (afini_media / 10.0) * 100)}%;"></div>
                    </div>
                    <p>{row['Afinidade']:.2f} / 10.0</p>
                </div>
                <div style="text-align: right;">
                    <h3>{row['Nota Final']:.2f}</h3>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)